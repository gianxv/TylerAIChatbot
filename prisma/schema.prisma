//////////////////////////////////////////////////////////////////////////////////////////////
// DO NOT MODIFY THIS FILE                                                                  //
// This file is automatically generated by ZenStack CLI and should not be manually updated. //
//////////////////////////////////////////////////////////////////////////////////////////////

datasource db {
  provider = "postgresql"
  url      = env("SERVER_DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

enum UserStatus {
  INVITED
  VERIFIED
}

/// @@allow('all', true)
model Topic {
  id             String          @id() @default(uuid())
  name           String
  description    String?
  isPopular      Boolean
  topicQuestions TopicQuestion[] @relation("topic")
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @default(now()) @updatedAt()
}

/// @@allow('all', true)
model Conversation {
  id            String    @id() @default(uuid())
  title         String?
  lastMessageAt String?
  userId        String
  user          User?     @relation(fields: [userId], references: [id], name: "user")
  messages      Message[] @relation("conversation")
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @default(now()) @updatedAt()
}

/// @@allow('all', true)
model Message {
  id             String        @id() @default(uuid())
  content        String
  isFromBot      Boolean
  isSaved        Boolean
  conversationId String
  conversation   Conversation? @relation(fields: [conversationId], references: [id], name: "conversation")
  savedItems     SavedItem[]   @relation("message")
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @default(now()) @updatedAt()
}

/// @@allow('all', true)
model SavedItem {
  id        String   @id() @default(uuid())
  category  String?
  title     String?
  shareLink String?
  userId    String
  user      User?    @relation(fields: [userId], references: [id], name: "user")
  messageId String
  message   Message? @relation(fields: [messageId], references: [id], name: "message")
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt()
}

/// @@allow('all', true)
model TopicQuestion {
  id        String   @id() @default(uuid())
  question  String
  isPopular Boolean
  topicId   String
  topic     Topic?   @relation(fields: [topicId], references: [id], name: "topic")
  userId    String
  user      User?    @relation(fields: [userId], references: [id], name: "user")
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt()
}

/// @@auth
/// @@allow('all', auth().id == this.id)
/// @@allow('all', auth().globalRole == 'ADMIN')
/// @@allow('create', globalRole != 'ADMIN')
/// @@allow('read', true)
model User {
  id              String          @id() @default(uuid())
  name            String?
  email           String?         @unique()
  pictureUrl      String?         @default("https://i.imgur.com/ZdJSK3Y.jpeg")
  tokenInvitation String?
  emailVerified   Boolean?
  status          UserStatus      @default(VERIFIED)
  globalRole      String          @default("USER")
  /// @password
  /// @omit
  password        String?
  createdAt       DateTime        @default(now())
  updatedAt       DateTime        @default(now()) @updatedAt()
  accounts        Account[]
  sessions        Session[]
  conversations   Conversation[]  @relation("user")
  savedItems      SavedItem[]     @relation("user")
  topicQuestions  TopicQuestion[] @relation("user")
}

/// @@allow('all', auth().id == user.id)
model Account {
  id                       String  @id() @default(uuid())
  userId                   String
  type                     String
  provider                 String
  providerAccountId        String
  refresh_token            String?
  access_token             String?
  expires_at               Int?
  token_type               String?
  scope                    String?
  id_token                 String?
  session_state            String?
  user                     User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  refresh_token_expires_in Int?

  @@unique([provider, providerAccountId])
}

/// @@allow('all', auth().id == user.id)
model Session {
  id           String   @id() @default(uuid())
  sessionToken String   @unique()
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}
